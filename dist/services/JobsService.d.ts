import type { ArtifactList } from '../models/ArtifactList';
import type { Job } from '../models/Job';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class JobsService {
    /**
     * Get job status
     * Retrieves the current status and progress of a job. Clients should poll this endpoint to determine when a job finishes (or fails), and to get progress updates.
     * **Notes:**
     * - `status` progresses through states: **queued** → **running** → **succeeded** (or **failed** or **canceled**).
     * - `progress` is a percentage (0-100) estimation of completion.
     * - `stage` is a high-level label of the current phase (e.g., "processing", "exporting").
     * - If `status` is `succeeded`, the `artifacts` list will be populated with output references.
     * - If `status` is `failed`, an `error` object (Problem Details) will be included with more information.
     * @param jobId Job identifier.
     * @returns Job Current job status
     * @throws ApiError
     */
    static getJobStatus(jobId: string): CancelablePromise<Job>;
    /**
     * Cancel a job
     * Requests cancellation of a running or queued job. This is a best-effort attempt: the job may still complete if it is near completion or if cancellation is not supported at the current stage.
     * **Notes:**
     * - Returns **202 Accepted** if the cancellation request was received. The job’s status will shortly transition to `canceled` if it wasn’t already finished.
     * - Returns **409 Conflict** if the job is already in a terminal state (succeeded/failed/canceled) or cannot be canceled.
     * @param jobId Job identifier.
     * @returns string Cancellation requested
     * @throws ApiError
     */
    static cancelJob(jobId: string, idempotencyKey?: string): CancelablePromise<string>;
    /**
     * Mark job as complete (internal)
     * **Internal endpoint:** Marks a job as completed successfully. This is used by internal services once the job’s outputs are ready to be finalized.
     * Clients should not call this endpoint directly. Requires an internal service scope.
     * @param jobId Job identifier.
     * @returns any Job marked as complete
     * @throws ApiError
     */
    static completeJob(jobId: string): CancelablePromise<{
        message?: string;
    }>;
    /**
     * List artifacts for a job
     * Lists all output artifacts generated by a completed job. Clients can use this to retrieve artifact IDs and metadata, then fetch each artifact's download URL.
     * **Notes:**
     * - Supports conditional requests: include an `If-None-Match` header with a previously returned ETag to avoid re-fetching unchanged data. A **304 Not Modified** will be returned if nothing changed.
     * - Each artifact entry includes an `id` which can be used with `GET /api/v1/artifacts/{artifactId}` to get a temporary download link.
     * @param jobId Job identifier.
     * @param ifNoneMatch An ETag from a previous response to conditionally fetch (for caching).
     * @returns ArtifactList Artifact list
     * @throws ApiError
     */
    static listJobArtifacts(jobId: string, ifNoneMatch?: string): CancelablePromise<ArtifactList>;
}
