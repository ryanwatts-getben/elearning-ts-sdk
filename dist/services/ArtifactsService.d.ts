import type { ArtifactLink } from '../models/ArtifactLink';
import type { ArtifactList } from '../models/ArtifactList';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class ArtifactsService {
    /**
     * List artifacts for a job
     * Lists all output artifacts generated by a completed job. Clients can use this to retrieve artifact IDs and metadata, then fetch each artifact's download URL.
     * **Notes:**
     * - Supports conditional requests: include an `If-None-Match` header with a previously returned ETag to avoid re-fetching unchanged data. A **304 Not Modified** will be returned if nothing changed.
     * - Each artifact entry includes an `id` which can be used with `GET /api/v1/artifacts/{artifactId}` to get a temporary download link.
     * @param jobId Job identifier.
     * @param ifNoneMatch An ETag from a previous response to conditionally fetch (for caching).
     * @returns ArtifactList Artifact list
     * @throws ApiError
     */
    static listJobArtifacts(jobId: string, ifNoneMatch?: string): CancelablePromise<ArtifactList>;
    /**
     * Get artifact download URL
     * Retrieves a time-limited **download URL** for the specified artifact file. This is typically used after listing artifacts for a job to actually download the content.
     * **Notes:**
     * - The returned URL (`downloadUrl`) is short-lived (see `expiresAt` timestamp). The client should download the artifact within that time.
     * - If the artifact is no longer available (expired or deleted), a 404 is returned.
     * @param artifactId Artifact identifier (as returned in a job's artifact list).
     * @returns ArtifactLink Temporary download URL
     * @throws ApiError
     */
    static getArtifactLink(artifactId: string): CancelablePromise<ArtifactLink>;
}
